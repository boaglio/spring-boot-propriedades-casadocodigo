--
-- Fernando Boaglio
-- 
-- Spring Boot Properties 
--
-- https://github.com/boaglio/spring-boot-properties
--
-- https://www.casadocodigo.com.br/products/livro-spring-boot
--
-- 2020-09
--
drop table propriedade IF EXISTS;
CREATE TABLE propriedade (
id MEDIUMINT NOT NULL AUTO_INCREMENT,
categoria VARCHAR(200),
nome VARCHAR(200),
valor VARCHAR(512) default '',
descricao VARCHAR(1000),
PRIMARY KEY (id),
UNIQUE INDEX nome_unique (nome ASC));
--
-- *** Common Application properties ***
--
-- ----------------------------------------
-- CORE PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','debug','false','Enable debug logs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','info.*','','Arbitrary properties to add to the info endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.config','','Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.exception-conversion-word','%wEx','Conversion word used when logging exceptions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.file.clean-history-on-start','false','Whether to clean the archive log files on startup. Only supported with the default logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.file.max-history','7.0','Maximum number of days archive log files are kept. Only supported with the default logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.file.max-size','10MB','Maximum log file size. Only supported with the default logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.file.name','','Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.file.path','','Location of the log file. For instance, `/var/log`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.file.total-size-cap','0B','Total size of log backups to be kept. Only supported with the default logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.group.*','','Log groups to quickly change multiple loggers at the same time. For instance, `logging.group.db=org.hibernate,org.springframework.jdbc`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.level.*','','Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.pattern.console','%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}','Appender pattern for output to the console. Supported only with the default Logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.pattern.dateformat','yyyy-MM-dd HH:mm:ss.SSS','Appender pattern for log date format. Supported only with the default Logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.pattern.file','%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}','Appender pattern for output to a file. Supported only with the default Logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.pattern.level','%5p','Appender pattern for log level. Supported only with the default Logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.pattern.rolling-file-name','${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz','Pattern for rolled-over log file names. Supported only with the default Logback setup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','logging.register-shutdown-hook','false','Register a shutdown hook for the logging system when it is initialized.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.aop.auto','true','Add @EnableAspectJAutoProxy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.aop.proxy-target-class','true','Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.application.admin.enabled','false','Whether to enable admin features for the application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.application.admin.jmx-name','org.springframework.boot:type=Admin,name=SpringApplication','JMX name of the application admin MBean.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.application.name','','Application name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.autoconfigure.exclude','','Auto-configuration classes to exclude.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.charset','UTF-8','Banner file encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.bitdepth','4.0','The bit depth to use for ANSI colors. Supported values are 4 (16 color) or 8 (256 color).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.height','','Height of the banner image in chars (default based on image height).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.invert','false','Whether images should be inverted for dark terminal themes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.location','classpath:banner.gif','Banner image file location (jpg or png can also be used).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.margin','2.0','Left hand image margin in chars.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.pixelmode','TEXT','The pixel mode to use when rendering the image.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.image.width','76.0','Width of the banner image in chars.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.banner.location','classpath:banner.txt','Banner text resource location.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.beaninfo.ignore','true','Whether to skip search of BeanInfo classes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.codec.log-request-details','false','Whether to log form data at DEBUG level, and headers at TRACE level.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.codec.max-in-memory-size','','Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated. This applies only to the auto-configured WebFlux server and WebClient instances. By default this is not set, in which case individual codec defaults apply. Most codecs are limited to 256K by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.config.additional-location','','Config file locations used in addition to the defaults.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.config.location','','Config file locations that replace the defaults.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.config.name','application','Config file name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.info.build.encoding','UTF-8','File encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.info.build.location','classpath:META-INF/build-info.properties','Location of the generated build-info.properties file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.info.git.encoding','UTF-8','File encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.info.git.location','classpath:git.properties','Location of the generated git.properties file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.jmx.default-domain','','JMX domain name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.jmx.enabled','false','Expose management beans to the JMX domain.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.jmx.server','mbeanServer','MBeanServer bean name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.jmx.unique-names','false','Whether unique runtime object names should be ensured.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.lifecycle.timeout-per-shutdown-phase','30s','Timeout for the shutdown of any phase (group of SmartLifecycle beans with the same ''phase'' value).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.allow-bean-definition-overriding','false','Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.banner-mode','console','Mode used to display the banner when the application runs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.cloud-platform','','Override the Cloud Platform auto-detection.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.lazy-initialization','false','Whether initialization should be performed lazily.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.log-startup-info','true','Whether to log information about the application when it starts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.register-shutdown-hook','true','Whether the application should have a shutdown hook registered.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.sources','','Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.main.web-application-type','','Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.mandatory-file-encoding','','Expected character encoding the application must use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.messages.always-use-message-format','false','Whether to always apply the MessageFormat rules, parsing even messages without arguments.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.messages.basename','messages','Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations. If it doesn''t contain a package qualifier (such as "org.mypackage"), it will be resolved from the classpath root.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.messages.cache-duration','','Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.messages.encoding','UTF-8','Message bundles encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.messages.fallback-to-system-locale','true','Whether to fall back to the system Locale if no files for a specific Locale have been found. if this is turned off, the only fallback will be the default file (e.g. "messages.properties" for basename "messages").');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.messages.use-code-as-default-message','false','Whether to use the message code as the default message instead of throwing a "NoSuchMessageException". Recommended during development only.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.output.ansi.enabled','detect','Configures the ANSI output.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.pid.fail-on-write-error','','Fails if ApplicationPidFileWriter is used but it cannot write the PID file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.pid.file','','Location of the PID file to write (if ApplicationPidFileWriter is used).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.profiles','','Comma-separated list of profile expressions that at least one should match for the document to be included.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.profiles.active','','Comma-separated list of active profiles. Can be overridden by a command line switch.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.profiles.include','','Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.auto-startup','true','Whether to automatically start the scheduler after initialization.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.jdbc.comment-prefix','[#, --]','Prefixes for single-line comments in SQL initialization scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.jdbc.initialize-schema','embedded','Database schema initialization mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.jdbc.schema','classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql','Path to the SQL file to use to initialize the database schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.job-store-type','memory','Quartz job store type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.overwrite-existing-jobs','false','Whether configured jobs should overwrite existing job definitions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.properties.*','','Additional Quartz Scheduler properties.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.scheduler-name','quartzScheduler','Name of the scheduler.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.startup-delay','0s','Delay after which the scheduler is started once initialization completes. Setting this property makes sense if no jobs should be run before the entire application has started up.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.quartz.wait-for-jobs-to-complete-on-shutdown','false','Whether to wait for running jobs to complete on shutdown.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.reactor.debug-agent.enabled','true','Whether the Reactor Debug Agent should be enabled when reactor-tools is present.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.pool.allow-core-thread-timeout','true','Whether core threads are allowed to time out. This enables dynamic growing and shrinking of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.pool.core-size','8.0','Core number of threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.pool.keep-alive','60s','Time limit for which threads may remain idle before being terminated.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.pool.max-size','','Maximum allowed number of threads. If tasks are filling up the queue, the pool can expand up to that size to accommodate the load. Ignored if the queue is unbounded.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.pool.queue-capacity','','Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the "max-size" property.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.shutdown.await-termination','false','Whether the executor should wait for scheduled tasks to complete on shutdown.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.shutdown.await-termination-period','','Maximum time the executor should wait for remaining tasks to complete.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.execution.thread-name-prefix','task-','Prefix to use for the names of newly created threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.scheduling.pool.size','1.0','Maximum allowed number of threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.scheduling.shutdown.await-termination','false','Whether the executor should wait for scheduled tasks to complete on shutdown.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.scheduling.shutdown.await-termination-period','','Maximum time the executor should wait for remaining tasks to complete.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','spring.task.scheduling.thread-name-prefix','scheduling-','Prefix to use for the names of newly created threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Core properties','trace','false','Enable trace logs.');
-- ----------------------------------------
-- CACHE PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.cache-names','','Comma-separated list of cache names to create if supported by the underlying cache manager. Usually, this disables the ability to create additional caches on-the-fly.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.caffeine.spec','','The spec to use to create caches. See CaffeineSpec for more details on the spec format.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.couchbase.expiration','','Entry expiration. By default the entries never expire. Note that this value is ultimately converted to seconds.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.ehcache.config','','The location of the configuration file to use to initialize EhCache.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.infinispan.config','','The location of the configuration file to use to initialize Infinispan.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.jcache.config','','The location of the configuration file to use to initialize the cache manager. The configuration file is dependent of the underlying cache implementation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.jcache.provider','','Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Needed only if more than one JSR-107 implementation is available on the classpath.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.redis.cache-null-values','true','Allow caching null values.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.redis.key-prefix','','Key prefix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.redis.time-to-live','','Entry expiration. By default the entries never expire.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.redis.use-key-prefix','true','Whether to use the key prefix when writing to Redis.');
insert into propriedade(categoria,nome,valor,descricao) values ('Cache properties','spring.cache.type','','Cache type. By default, auto-detected according to the environment.');
-- ----------------------------------------
-- MAIL PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.default-encoding','UTF-8','Default MimeMessage encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.host','','SMTP server host. For instance, `smtp.example.com`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.jndi-name','','Session JNDI name. When set, takes precedence over other Session settings.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.password','','Login password of the SMTP server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.port','','SMTP server port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.properties.*','','Additional JavaMail Session properties.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.protocol','smtp','Protocol used by the SMTP server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.test-connection','false','Whether to test that the mail server is available on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.mail.username','','Login user of the SMTP server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.sendgrid.api-key','','SendGrid API key.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.sendgrid.proxy.host','','SendGrid proxy host.');
insert into propriedade(categoria,nome,valor,descricao) values ('Mail properties','spring.sendgrid.proxy.port','','SendGrid proxy port.');
-- ----------------------------------------
-- JSON PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.date-format','','Format to use when serializing Date objects.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.disable-html-escaping','','Whether to disable the escaping of HTML characters such as ''<'', ''>'', etc.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.disable-inner-class-serialization','','Whether to exclude inner classes during serialization.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.enable-complex-map-key-serialization','','Whether to enable serialization of complex map keys (i.e. non-primitives).');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.exclude-fields-without-expose-annotation','','Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.field-naming-policy','','Naming policy that should be applied to an object''s field during serialization and deserialization.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.generate-non-executable-json','','Whether to generate non executable JSON by prefixing the output with some special text.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.lenient','','Whether to be lenient about parsing JSON that doesn''t conform to RFC 4627.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.long-serialization-policy','','Serialization policy for Long and long types.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.pretty-printing','','Whether to output serialized JSON that fits in a page for pretty printing.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.gson.serialize-nulls','','Whether to serialize null fields.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.date-format','','Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.default-property-inclusion','','Controls the inclusion of properties during serialization. Configured with one of the values in Jackson''s JsonInclude.Include enumeration.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.deserialization.*','','Jackson on/off features that affect the way Java objects are deserialized.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.generator.*','','Jackson on/off features for generators.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.locale','','Locale used for formatting.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.mapper.*','','Jackson general purpose on/off features.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.parser.*','','Jackson on/off features for parsers.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.property-naming-strategy','','One of the constants on Jackson''s PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.serialization.*','','Jackson on/off features that affect the way Java objects are serialized.');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.time-zone','','Time zone used when formatting dates. For instance, "America/Los_Angeles" or "GMT+10".');
insert into propriedade(categoria,nome,valor,descricao) values ('JSON properties','spring.jackson.visibility.*','','Jackson visibility thresholds that can be used to limit which methods (and fields) are auto-detected.');

insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.pool.idle-timeout','120s','Idle timeout before an idle connection is removed. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.port','9042.0','Port to use if a contact point does not specify one.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.repositories.type','auto','Type of Cassandra repositories to enable.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.consistency','','Queries consistency level.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.page-size','5000.0','How many rows will be retrieved simultaneously in a single network roundtrip.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.serial-consistency','','Queries serial consistency level.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.throttler.drain-interval','10ms','How often the throttler attempts to dequeue requests. Set this high enough that each attempt will process multiple entries in the queue, but not delay requests too much.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.throttler.max-concurrent-requests','10000.0','Maximum number of requests that are allowed to execute in parallel.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.throttler.max-queue-size','10000.0','Maximum number of requests that can be enqueued when the throttling threshold is exceeded.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.throttler.max-requests-per-second','10000.0','Maximum allowed request rate.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.throttler.type','none','Request throttling type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.request.timeout','2s','How long the driver waits for a request to complete.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.schema-action','none','Schema action to take at startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.session-name','','Name of the Cassandra session.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.ssl','false','Enable SSL support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.cassandra.username','','Login user of the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.couchbase.auto-index','false','Automatically create views and indexes. Use the meta-data provided by "@ViewIndexed", "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed".');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.couchbase.bucket-name','','Name of the bucket to connect to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.couchbase.field-naming-strategy','','Fully qualified name of the FieldNamingStrategy to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.couchbase.repositories.type','auto','Type of Couchbase repositories to enable.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.couchbase.scope-name','','Name of the scope used for all collection access.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.couchbase.type-key','_class','Name of the field that stores the type information for complex types when using "MappingCouchbaseConverter".');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.connection-timeout','','Connection timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.endpoints','','Comma-separated list of the Elasticsearch endpoints to connect to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.max-in-memory-size','','Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.password','','Credentials password.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.socket-timeout','','Read and Write Socket timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.use-ssl','false','Whether the client should use SSL to connect to the endpoints.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.client.reactive.username','','Credentials username.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.elasticsearch.repositories.enabled','true','Whether to enable Elasticsearch repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.jdbc.repositories.enabled','true','Whether to enable JDBC repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.jpa.repositories.bootstrap-mode','deferred','Bootstrap mode for JPA repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.jpa.repositories.enabled','true','Whether to enable JPA repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.ldap.repositories.enabled','true','Whether to enable LDAP repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.authentication-database','','Authentication database name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.auto-index-creation','','Whether to enable auto-index creation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.database','','Database name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.field-naming-strategy','','Fully qualified name of the FieldNamingStrategy to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.grid-fs-database','','GridFS database name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.host','','Mongo server host. Cannot be set with URI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.password','','Login password of the mongo server. Cannot be set with URI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.port','','Mongo server port. Cannot be set with URI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.replica-set-name','','Required replica set name for the cluster. Cannot be set with URI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.repositories.type','auto','Type of Mongo repositories to enable.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.uri','mongodb://localhost/test','Mongo database URI. Cannot be set with host, port, credentials and replica set name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.username','','Login user of the mongo server. Cannot be set with URI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.mongodb.uuid-representation','java-legacy','Representation to use when converting a UUID to a BSON binary value.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.auto-index','none','Auto index mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.embedded.enabled','true','Whether to enable embedded mode if the embedded driver is available.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.open-in-view','false','Register OpenSessionInViewInterceptor that binds a Neo4j Session to the thread for the entire processing of the request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.password','','Login password of the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.repositories.enabled','true','Whether to enable Neo4j repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.uri','','URI used by the driver. Auto-detected by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.use-native-types','false','Whether to use Neo4j native types wherever possible.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.neo4j.username','','Login user of the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.r2dbc.repositories.enabled','true','Whether to enable R2DBC repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.redis.repositories.enabled','true','Whether to enable Redis repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.base-path','','Base path to be used by Spring Data REST to expose repository resources.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.default-media-type','','Content type to use as a default when none is specified.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.default-page-size','','Default size of pages.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.detection-strategy','default','Strategy to use to determine which repositories get exposed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.enable-enum-translation','','Whether to enable enum value translation through the Spring Data REST default resource bundle.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.limit-param-name','','Name of the URL query string parameter that indicates how many results to return at once.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.max-page-size','','Maximum size of pages.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.page-param-name','','Name of the URL query string parameter that indicates what page to return.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.return-body-on-create','','Whether to return a response body after creating an entity.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.return-body-on-update','','Whether to return a response body after updating an entity.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.rest.sort-param-name','','Name of the URL query string parameter that indicates what direction to sort results.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.solr.host','http://127.0.0.1:8983/solr','Solr host. Ignored if "zk-host" is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.solr.repositories.enabled','true','Whether to enable Solr repositories.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.solr.zk-host','','ZooKeeper host address in the form HOST:PORT.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.default-page-size','20.0','Default page size.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.max-page-size','2000.0','Maximum page size to be accepted.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.one-indexed-parameters','false','Whether to expose and assume 1-based page number indexes. Defaults to "false", meaning a page number of 0 in the request equals the first page.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.page-parameter','page','Page index parameter name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.prefix','','General prefix to be prepended to the page number and page size parameters.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.qualifier-delimiter','','Delimiter to be used between the qualifier and the actual page number and size properties.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.pageable.size-parameter','size','Page size parameter name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.data.web.sort.sort-parameter','sort','Sort parameter name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.continue-on-error','false','Whether to stop if an error occurs while initializing the database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.data','','Data (DML) script resource references.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.data-password','','Password of the database to execute DML scripts (if different).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.data-username','','Username of the database to execute DML scripts (if different).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.abandoned-usage-tracking','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');  
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.access-to-underlying-connection-allowed','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.auto-commit-on-return','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.cache-state','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.connection-factory-class-name','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.connection-init-sqls','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.default-auto-commit','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.default-catalog','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.default-query-timeout','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.default-read-only','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.default-schema','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.default-transaction-isolation','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.disconnection-sql-codes','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.driver','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.driver-class-name','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.eviction-policy-class-name','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.fast-fail-validation','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.initial-size','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.jmx-name','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.lifo','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.log-abandoned','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.log-expired-connections','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.login-timeout','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.max-conn-lifetime-millis','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.max-idle','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.max-open-prepared-statements','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.max-total','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.max-wait-millis','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.min-evictable-idle-time-millis','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.min-idle','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.num-tests-per-eviction-run','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.password','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.pool-prepared-statements','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.remove-abandoned-on-borrow','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.remove-abandoned-on-maintenance','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.remove-abandoned-timeout','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.rollback-on-return','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.soft-min-evictable-idle-time-millis','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.test-on-borrow','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.test-on-create','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.test-on-return','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.test-while-idle','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.time-between-eviction-runs-millis','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.url','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.username','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.validation-query','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.dbcp2.validation-query-timeout','','Commons DBCP2 specific settings bound to an instance of DBCP2''s BasicDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.driver-class-name','','Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.generate-unique-name','true','Whether to generate a random datasource name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.allow-pool-suspension','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.auto-commit','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.catalog','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.connection-init-sql','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.connection-test-query','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.connection-timeout','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.data-source-class-name','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.data-source-j-n-d-i','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.data-source-properties','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.driver-class-name','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.exception-override-class-name','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.health-check-properties','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.health-check-registry','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.idle-timeout','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.initialization-fail-timeout','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.isolate-internal-queries','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.jdbc-url','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.leak-detection-threshold','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.login-timeout','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.max-lifetime','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.maximum-pool-size','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.metric-registry','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.metrics-tracker-factory','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.minimum-idle','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.password','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.pool-name','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.read-only','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.register-mbeans','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.scheduled-executor','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.schema','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.transaction-isolation','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.username','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.hikari.validation-timeout','','Hikari specific settings bound to an instance of Hikari''s HikariDataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.initialization-mode','embedded','Initialize the datasource with available DDL and DML scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.jndi-name','','JNDI location of the datasource. Class, url, username and password are ignored when set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.name','','Name of the datasource. Default to "testdb" when using an embedded database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.password','','Login password of the database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.platform','all','Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or data-${platform}.sql).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.schema','','Schema (DDL) script resource references.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.schema-password','','Password of the database to execute DDL scripts (if different).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.schema-username','','Username of the database to execute DDL scripts (if different).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.separator',';','Statement separator in SQL initialization scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.sql-script-encoding','','SQL scripts encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.abandon-when-percentage-full','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.access-to-underlying-connection-allowed','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.alternate-username-allowed','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.commit-on-return','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.connection-properties','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.data-source','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.data-source-j-n-d-i','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.db-properties','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.default-auto-commit','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.default-catalog','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.default-read-only','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.default-transaction-isolation','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.driver-class-name','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.fair-queue','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.ignore-exception-on-pre-load','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.init-s-q-l','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.initial-size','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.jdbc-interceptors','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.jmx-enabled','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.log-abandoned','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.log-validation-errors','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.login-timeout','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.max-active','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.max-age','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.max-idle','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.max-wait','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.min-evictable-idle-time-millis','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.min-idle','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.name','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.num-tests-per-eviction-run','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.password','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.propagate-interrupt-state','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.remove-abandoned','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.remove-abandoned-timeout','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.rollback-on-return','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.suspect-timeout','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.test-on-borrow','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.test-on-connect','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.test-on-return','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.test-while-idle','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.time-between-eviction-runs-millis','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.url','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.use-disposable-connection-facade','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.use-equals','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.use-lock','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.use-statement-facade','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.username','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.validation-interval','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.validation-query','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.validation-query-timeout','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.tomcat.validator-class-name','','Tomcat datasource specific settings bound to an instance of Tomcat JDBC''s DataSource');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.type','','Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.url','','JDBC URL of the database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.username','','Login username of the database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.xa.data-source-class-name','','XA datasource fully qualified name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.datasource.xa.properties.*','','Properties to pass to the XA data source.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.elasticsearch.rest.connection-timeout','1s','Connection timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.elasticsearch.rest.password','','Credentials password.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.elasticsearch.rest.read-timeout','30s','Read timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.elasticsearch.rest.uris','[http://localhost:9200]','Comma-separated list of the Elasticsearch instances to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.elasticsearch.rest.username','','Credentials username.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.h2.console.enabled','false','Whether to enable the console.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.h2.console.path','/h2-console','Path at which the console is available.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.h2.console.settings.trace','false','Whether to enable trace output.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.h2.console.settings.web-allow-others','false','Whether to enable remote access.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.influx.password','','Login password.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.influx.url','','URL of the InfluxDB instance to which to connect.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.influx.user','','Login user.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jdbc.template.fetch-size','-1.0','Number of rows that should be fetched from the database when more rows are needed. Use -1 to use the JDBC driver''s default configuration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jdbc.template.max-rows','-1.0','Maximum number of rows. Use -1 to use the JDBC driver''s default configuration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jdbc.template.query-timeout','','Query timeout. Default is to use the JDBC driver''s default configuration. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jooq.sql-dialect','','SQL dialect to use. Auto-detected by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.database','','Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.database-platform','','Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.generate-ddl','false','Whether to initialize the schema on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.hibernate.ddl-auto','','DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none".');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.hibernate.naming.implicit-strategy','','Fully qualified name of the implicit naming strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.hibernate.naming.physical-strategy','','Fully qualified name of the physical naming strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.hibernate.use-new-id-generator-mappings','','Whether to use Hibernate''s newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is actually a shortcut for the "hibernate.id.new_generator_mappings" property. When not specified will default to "true".');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.mapping-resources','','Mapping resources (equivalent to "mapping-file" entries in persistence.xml).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.open-in-view','true','Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.properties.*','','Additional native properties to set on the JPA provider.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.jpa.show-sql','false','Whether to enable logging of SQL statements.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.mongodb.embedded.features','[sync_delay]','Comma-separated list of features to enable. Uses the defaults of the configured version by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.mongodb.embedded.storage.database-dir','','Directory used for data storage.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.mongodb.embedded.storage.oplog-size','','Maximum size of the oplog.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.mongodb.embedded.storage.repl-set-name','','Name of the replica set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.mongodb.embedded.version','3.5.5','Version of Mongo to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.generate-unique-name','false','Whether to generate a random database name. Ignore any configured name when enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.name','','Database name. Set if no name is specified in the url. Default to "testdb" when using an embedded database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.password','','Login password of the database. Set if no password is specified in the url.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.pool.enabled','','Whether pooling is enabled. Enabled automatically if "r2dbc-pool" is on the classpath.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.pool.initial-size','10.0','Initial connection pool size.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.pool.max-idle-time','30m','Maximum amount of time that a connection is allowed to sit idle in the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.pool.max-size','10.0','Maximal connection pool size.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.pool.validation-query','','Validation query.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.properties.*','','Additional R2DBC options.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.url','','R2DBC URL of the database. database name, username, password and pooling options specified in the url take precedence over individual options.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.r2dbc.username','','Login username of the database. Set if no username is specified in the url.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.client-name','','Client name to be set on connections with CLIENT SETNAME.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.cluster.max-redirects','','Maximum number of redirects to follow when executing commands across the cluster.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.cluster.nodes','','Comma-separated list of "host:port" pairs to bootstrap from. This represents an "initial" list of cluster nodes and is required to have at least one entry.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.database','0.0','Database index used by the connection factory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.host','localhost','Redis server host.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.jedis.pool.max-active','8.0','Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.jedis.pool.max-idle','8.0','Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.jedis.pool.max-wait','-1ms','Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.jedis.pool.min-idle','0.0','Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.jedis.pool.time-between-eviction-runs','','Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.cluster.refresh.adaptive','false','Whether adaptive topology refreshing using all available refresh triggers should be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.cluster.refresh.period','','Cluster topology refresh period.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.pool.max-active','8.0','Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.pool.max-idle','8.0','Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.pool.max-wait','-1ms','Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.pool.min-idle','0.0','Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.pool.time-between-eviction-runs','','Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.lettuce.shutdown-timeout','100ms','Shutdown timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.password','','Login password of the redis server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.port','6379.0','Redis server port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.sentinel.master','','Name of the Redis server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.sentinel.nodes','','Comma-separated list of "host:port" pairs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.sentinel.password','','Password for authenticating with sentinel(s).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.ssl','false','Whether to enable SSL support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.timeout','','Connection timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data properties','spring.redis.url','','Connection URL. Overrides host, port, and password. User is ignored. Example: redis://user:password@example.com:6379');
-- ----------------------------------------
-- TRANSACTION PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.borrow-connection-timeout','30.0','Timeout, in seconds, for borrowing connections from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag','true','Whether to ignore the transacted flag when creating session.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.local-transaction-mode','false','Whether local transactions are desired.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.maintenance-interval','60.0','Time, in seconds, between runs of the pool''s maintenance thread.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.max-idle-time','60.0','Time, in seconds, after which connections are cleaned up from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.max-lifetime','0.0','Time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.max-pool-size','1.0','Maximum size of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.min-pool-size','1.0','Minimum size of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.reap-timeout','0.0','Reap timeout, in seconds, for borrowed connections. 0 denotes no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.unique-resource-name','jmsConnectionFactory','Unique name used to identify the resource during recovery.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name','','Vendor-specific implementation of XAConnectionFactory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.connectionfactory.xa-properties','','Vendor-specific XA properties.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.borrow-connection-timeout','30.0','Timeout, in seconds, for borrowing connections from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.concurrent-connection-validation','true','Whether to use concurrent connection validation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.default-isolation-level','','Default isolation level of connections provided by the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.login-timeout','0.0','Timeout, in seconds, for establishing a database connection.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.maintenance-interval','60.0','Time, in seconds, between runs of the pool''s maintenance thread.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.max-idle-time','60.0','Time, in seconds, after which connections are cleaned up from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.max-lifetime','0.0','Time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.max-pool-size','1.0','Maximum size of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.min-pool-size','1.0','Minimum size of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.reap-timeout','0.0','Reap timeout, in seconds, for borrowed connections. 0 denotes no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.test-query','','SQL query or statement used to validate a connection before returning it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.unique-resource-name','dataSource','Unique name used to identify the resource during recovery.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.xa-data-source-class-name','','Vendor-specific implementation of XAConnectionFactory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.datasource.xa-properties','','Vendor-specific XA properties.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.allow-sub-transactions','true','Specify whether sub-transactions are allowed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.checkpoint-interval','500.0','Interval between checkpoints, expressed as the number of log writes between two checkpoints. A checkpoint reduces the log file size at the expense of adding some overhead in the runtime.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.default-jta-timeout','10000ms','Default timeout for JTA transactions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.default-max-wait-time-on-shutdown','','How long should normal shutdown (no-force) wait for transactions to complete.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.enable-logging','true','Whether to enable disk logging.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.force-shutdown-on-vm-exit','false','Whether a VM shutdown should trigger forced shutdown of the transaction core.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.log-base-dir','','Directory in which the log files should be stored. Defaults to the current working directory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.log-base-name','tmlog','Transactions log file base name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.max-actives','50.0','Maximum number of active transactions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.max-timeout','300000ms','Maximum timeout that can be allowed for transactions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.recovery.delay','10000ms','Delay between two recovery scans.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay','86400000ms','Delay after which recovery can cleanup pending (''orphaned'') log entries.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.recovery.max-retries','5.0','Number of retry attempts to commit the transaction before throwing an exception.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.recovery.retry-interval','10000ms','Delay between retry attempts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.serial-jta-transactions','true','Whether sub-transactions should be joined when possible.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.service','','Transaction manager implementation that should be started.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.threaded-two-phase-commit','false','Whether to use different (and concurrent) threads for two-phase commit on the participating resources.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.atomikos.properties.transaction-manager-unique-name','','The transaction manager''s unique name. Defaults to the machine''s IP address. If you plan to run more than one transaction manager against one database you must set this property to a unique value.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.acquire-increment','1.0','Number of connections to create when growing the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.acquisition-interval','1.0','Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.acquisition-timeout','30.0','Timeout, in seconds, for acquiring connections from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.allow-local-transactions','false','Whether the transaction manager should allow mixing XA and non-XA transactions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.apply-transaction-timeout','false','Whether the transaction timeout should be set on the XAResource when it is enlisted.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled','true','Whether resources should be enlisted and delisted automatically.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.cache-producers-consumers','true','Whether producers and consumers should be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.class-name','','Underlying implementation class name of the XA resource.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.defer-connection-release','true','Whether the provider can run many transactions on the same connection and supports transaction interleaving.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.disabled','false','Whether this resource is disabled, meaning it''s temporarily forbidden to acquire a connection from its pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.driver-properties','','Properties that should be set on the underlying implementation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.failed','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.ignore-recovery-failures','false','Whether recovery failures should be ignored.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.max-idle-time','60.0','Time, in seconds, after which connections are cleaned up from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.max-pool-size','0.0','Maximum size of the pool. 0 denotes no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.min-pool-size','0.0','Minimum size of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.password','','Password to use to connect to the JMS provider.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.share-transaction-connections','false','Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.test-connections','false','Whether connections should be tested when acquired from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.two-pc-ordering-position','1.0','Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.unique-name','jmsConnectionFactory','Unique name used to identify the resource during recovery.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.use-tm-join','true','Whether TMJOIN should be used when starting XAResources.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.connectionfactory.user','','User to use to connect to the JMS provider.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.acquire-increment','1.0','Number of connections to create when growing the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.acquisition-interval','1.0','Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.acquisition-timeout','30.0','Timeout, in seconds, for acquiring connections from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.allow-local-transactions','false','Whether the transaction manager should allow mixing XA and non-XA transactions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.apply-transaction-timeout','false','Whether the transaction timeout should be set on the XAResource when it is enlisted.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.automatic-enlisting-enabled','true','Whether resources should be enlisted and delisted automatically.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.class-name','','Underlying implementation class name of the XA resource.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.cursor-holdability','','Default cursor holdability for connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.defer-connection-release','true','Whether the database can run many transactions on the same connection and supports transaction interleaving.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.disabled','false','Whether this resource is disabled, meaning it''s temporarily forbidden to acquire a connection from its pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.driver-properties','','Properties that should be set on the underlying implementation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.enable-jdbc4-connection-test','false','Whether Connection.isValid() is called when acquiring a connection from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.failed','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.ignore-recovery-failures','false','Whether recovery failures should be ignored.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.isolation-level','','Default isolation level for connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.local-auto-commit','','Default auto-commit mode for local transactions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.login-timeout','','Timeout, in seconds, for establishing a database connection.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.max-idle-time','60.0','Time, in seconds, after which connections are cleaned up from the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.max-pool-size','0.0','Maximum size of the pool. 0 denotes no limit.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.min-pool-size','0.0','Minimum size of the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.prepared-statement-cache-size','0.0','Target size of the prepared statement cache. 0 disables the cache.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.share-transaction-connections','false','Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.test-query','','SQL query or statement used to validate a connection before returning it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.two-pc-ordering-position','1.0','Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, and always last is Integer.MAX_VALUE).');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.unique-name','dataSource','Unique name used to identify the resource during recovery.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.bitronix.datasource.use-tm-join','true','Whether TMJOIN should be used when starting XAResources.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.enabled','true','Whether to enable JTA support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.log-dir','','Transaction logs directory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.jta.transaction-manager-id','','Transaction manager unique identifier.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.transaction.default-timeout','','Default transaction timeout. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Transaction properties','spring.transaction.rollback-on-commit-failure','','Whether to roll back on commit failures.');
-- ----------------------------------------
-- DATA MIGRATION PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.baseline-description','>> Flyway Baseline >>','Description to tag an existing schema with when applying a baseline.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.baseline-on-migrate','false','Whether to automatically call baseline when migrating a non-empty schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.baseline-version','1','Version to tag an existing schema with when executing baseline.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.batch','','Whether to batch SQL statements when executing them. Requires Flyway Pro or Flyway Enterprise.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.check-location','true','Whether to check that migration scripts location exists.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.clean-disabled','false','Whether to disable cleaning of the database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.clean-on-validation-error','false','Whether to automatically call clean when a validation error occurs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.connect-retries','0.0','Maximum number of retries when attempting to connect to the database.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.default-schema','','Default schema name managed by Flyway (case-sensitive).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.enabled','true','Whether to enable flyway.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.encoding','UTF-8','Encoding of SQL migrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.error-overrides','','Rules for the built-in error handling to override specific SQL states and error codes. Requires Flyway Pro or Flyway Enterprise.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.group','false','Whether to group all pending migrations together in the same transaction when applying them.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.ignore-future-migrations','true','Whether to ignore future migrations when reading the schema history table.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.ignore-ignored-migrations','false','Whether to ignore ignored migrations when reading the schema history table.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.ignore-missing-migrations','false','Whether to ignore missing migrations when reading the schema history table.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.ignore-pending-migrations','false','Whether to ignore pending migrations when reading the schema history table.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.init-sqls','','SQL statements to execute to initialize a connection immediately after obtaining it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.installed-by','','Username recorded in the schema history table as having applied the migration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.license-key','','Licence key for Flyway Pro or Flyway Enterprise.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.locations','[classpath:db/migration]','Locations of migrations scripts. Can contain the special "{vendor}" placeholder to use vendor-specific locations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.mixed','false','Whether to allow mixing transactional and non-transactional statements within the same migration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.oracle-sqlplus','','Whether to enable support for Oracle SQL*Plus commands. Requires Flyway Pro or Flyway Enterprise.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.oracle-sqlplus-warn','','Whether to issue a warning rather than an error when a not-yet-supported Oracle SQL*Plus statement is encountered. Requires Flyway Pro or Flyway Enterprise.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.out-of-order','false','Whether to allow migrations to be run out of order.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.password','','Login password of the database to migrate.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.placeholder-prefix','${','Prefix of placeholders in migration scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.placeholder-replacement','true','Perform placeholder replacement in migration scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.placeholder-suffix','}','Suffix of placeholders in migration scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.placeholders.*','','Placeholders and their replacements to apply to sql migration scripts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.repeatable-sql-migration-prefix','R','File name prefix for repeatable SQL migrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.schemas','','Scheme names managed by Flyway (case-sensitive).');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.skip-default-callbacks','false','Whether to skip default callbacks. If true, only custom callbacks are used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.skip-default-resolvers','false','Whether to skip default resolvers. If true, only custom resolvers are used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.sql-migration-prefix','V','File name prefix for SQL migrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.sql-migration-separator','__','File name separator for SQL migrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.sql-migration-suffixes','[.sql]','File name suffix for SQL migrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.stream','','Whether to stream SQL migrations when executing them. Requires Flyway Pro or Flyway Enterprise.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.table','flyway_schema_history','Name of the schema history table that will be used by Flyway.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.tablespace','','Tablespace in which the schema history table is created. Ignored when using a database that does not support tablespaces. Defaults to the default tablespace of the connection used by Flyway.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.target','','Target version up to which migrations should be considered.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.url','','JDBC url of the database to migrate. If not set, the primary configured data source is used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.user','','Login user of the database to migrate.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.validate-migration-naming','false','Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.flyway.validate-on-migrate','true','Whether to automatically call validate when performing a migration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.change-log','classpath:/db/changelog/db.changelog-master.yaml','Change log configuration path.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.clear-checksums','false','Whether to clear all checksums in the current changelog, so they will be recalculated upon the next update.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.contexts','','Comma-separated list of runtime contexts to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.database-change-log-lock-table','DATABASECHANGELOGLOCK','Name of table to use for tracking concurrent Liquibase usage.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.database-change-log-table','DATABASECHANGELOG','Name of table to use for tracking change history.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.default-schema','','Default database schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.drop-first','false','Whether to first drop the database schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.enabled','true','Whether to enable Liquibase support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.labels','','Comma-separated list of runtime labels to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.liquibase-schema','','Schema to use for Liquibase objects.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.liquibase-tablespace','','Tablespace to use for Liquibase objects.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.parameters.*','','Change log parameters.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.password','','Login password of the database to migrate.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.rollback-file','','File to which rollback SQL is written when an update is performed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.tag','','Tag name to use when applying database changes. Can also be used with "rollbackFile" to generate a rollback script for all existing changes associated with that tag.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.test-rollback-on-update','false','Whether rollback should be tested before update is performed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.url','','JDBC URL of the database to migrate. If not set, the primary configured data source is used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Data migration properties','spring.liquibase.user','','Login user of the database to migrate.');
-- ----------------------------------------
-- INTEGRATION PROPERTIES
-- ----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.broker-url','','URL of the ActiveMQ broker. Auto-generated by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.close-timeout','15s','Time to wait before considering a close complete.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.in-memory','true','Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.non-blocking-redelivery','false','Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.packages.trust-all','','Whether to trust all packages.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.packages.trusted','','Comma-separated list of specific packages to trust (when not trusting all packages).');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.password','','Login password of the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.block-if-full','true','Whether to block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.block-if-full-timeout','-1ms','Blocking period before throwing an exception if the pool is still full.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.enabled','false','Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.idle-timeout','30s','Connection idle timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.max-connections','1.0','Maximum number of pooled connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.max-sessions-per-connection','500.0','Maximum number of pooled sessions per connection in the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.time-between-expiration-check','-1ms','Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.pool.use-anonymous-producers','true','Whether to use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.send-timeout','0ms','Time to wait on message sends for a response. Set it to 0 to wait forever.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.activemq.user','','Login user of the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.cluster-password','','Cluster password. Randomly generated on startup by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.data-directory','','Journal file directory. Not necessary if persistence is turned off.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.enabled','true','Whether to enable embedded mode if the Artemis server APIs are available.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.persistent','false','Whether to enable persistent store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.queues','[]','Comma-separated list of queues to create on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.server-id','0.0','Server ID. By default, an auto-incremented counter is used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.embedded.topics','[]','Comma-separated list of topics to create on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.host','localhost','Artemis broker host.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.mode','','Artemis deployment mode, auto-detected by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.password','','Login password of the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.block-if-full','true','Whether to block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.block-if-full-timeout','-1ms','Blocking period before throwing an exception if the pool is still full.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.enabled','false','Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.idle-timeout','30s','Connection idle timeout.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.max-connections','1.0','Maximum number of pooled connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.max-sessions-per-connection','500.0','Maximum number of pooled sessions per connection in the pool.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.time-between-expiration-check','-1ms','Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.pool.use-anonymous-producers','true','Whether to use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.port','61616.0','Artemis broker port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.artemis.user','','Login user of the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.batch.initialize-schema','embedded','Database schema initialization mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.batch.job.enabled','true','Execute all Spring Batch jobs in the context on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.batch.job.names','','Comma-separated list of job names to execute on startup (for instance, `job1,job2`). By default, all Jobs found in the context are executed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.batch.schema','classpath:org/springframework/batch/core/schema-@@platform@@.sql','Path to the SQL file to use to initialize the database schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.batch.table-prefix','','Table prefix for all the batch meta-data tables.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.hazelcast.config','','The location of the configuration file to use to initialize Hazelcast.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.integration.jdbc.initialize-schema','embedded','Database schema initialization mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.integration.jdbc.schema','classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql','Path to the SQL file to use to initialize the database schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.integration.rsocket.client.host','','TCP RSocket server host to connect to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.integration.rsocket.client.port','','TCP RSocket server port to connect to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.integration.rsocket.client.uri','','WebSocket RSocket server uri to connect to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.integration.rsocket.server.message-mapping-enabled','false','Whether to handle message mapping for RSocket via Spring Integration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.cache.consumers','false','Whether to cache message consumers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.cache.enabled','true','Whether to cache sessions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.cache.producers','true','Whether to cache message producers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.cache.session-cache-size','1.0','Size of the session cache (per JMS Session type).');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.jndi-name','','Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.listener.acknowledge-mode','','Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.listener.auto-startup','true','Start the container automatically on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.listener.concurrency','','Minimum number of concurrent consumers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.listener.max-concurrency','','Maximum number of concurrent consumers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.listener.receive-timeout','1s','Timeout to use for receive calls. Use -1 for a no-wait receive or 0 for no timeout at all. The latter is only feasible if not running within a transaction manager and is generally discouraged since it prevents clean shutdown.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.pub-sub-domain','false','Whether the default destination type is topic.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.default-destination','','Default destination to use on send and receive operations that do not have a destination parameter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.delivery-delay','','Delivery delay to use for send calls.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.delivery-mode','','Delivery mode. Enables QoS (Quality of Service) when set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.priority','','Priority of a message when sending. Enables QoS (Quality of Service) when set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.qos-enabled','','Whether to enable explicit QoS (Quality of Service) when sending a message. When enabled, the delivery mode, priority and time-to-live properties will be used when sending a message. QoS is automatically enabled when at least one of those settings is customized.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.receive-timeout','','Timeout to use for receive calls.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.jms.template.time-to-live','','Time-to-live of a message when sending. Enables QoS (Quality of Service) when set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.client-id','','ID to pass to the server when making requests. Used for server-side logging.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.fail-fast','false','Whether to fail fast if the broker is not available on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.properties.*','','Additional admin-specific properties used to configure the client.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.security.protocol','','Security protocol used to communicate with brokers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.key-password','','Password of the private key in the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.key-store-location','','Location of the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.key-store-password','','Store password for the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.protocol','','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.trust-store-location','','Location of the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.trust-store-password','','Store password for the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.admin.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.bootstrap-servers','','Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.client-id','','ID to pass to the server when making requests. Used for server-side logging.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.auto-commit-interval','','Frequency with which the consumer offsets are auto-committed to Kafka if ''enable.auto.commit'' is set to true.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.auto-offset-reset','','What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.bootstrap-servers','','Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.client-id','','ID to pass to the server when making requests. Used for server-side logging.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.enable-auto-commit','','Whether the consumer''s offset is periodically committed in the background.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.fetch-max-wait','','Maximum amount of time the server blocks before answering the fetch request if there isn''t sufficient data to immediately satisfy the requirement given by "fetch-min-size".');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.fetch-min-size','','Minimum amount of data the server should return for a fetch request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.group-id','','Unique string that identifies the consumer group to which this consumer belongs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.heartbeat-interval','','Expected time between heartbeats to the consumer coordinator.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.isolation-level','','Isolation level for reading messages that have been written transactionally.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.key-deserializer','','Deserializer class for keys.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.max-poll-records','','Maximum number of records returned in a single call to poll().');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.properties.*','','Additional consumer-specific properties used to configure the client.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.security.protocol','','Security protocol used to communicate with brokers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.key-password','','Password of the private key in the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.key-store-location','','Location of the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.key-store-password','','Store password for the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.protocol','','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.trust-store-location','','Location of the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.trust-store-password','','Store password for the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.consumer.value-deserializer','','Deserializer class for values.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.jaas.control-flag','required','Control flag for login configuration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.jaas.enabled','false','Whether to enable JAAS configuration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.jaas.login-module','com.sun.security.auth.module.Krb5LoginModule','Login module.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.jaas.options.*','','Additional JAAS options.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.ack-count','','Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.ack-mode','','Listener AckMode. See the spring-kafka documentation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.ack-time','','Time between offset commits when ackMode is "TIME" or "COUNT_TIME".');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.client-id','','Prefix for the listener''s consumer client.id property.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.concurrency','','Number of threads to run in the listener containers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.idle-event-interval','','Time between publishing idle consumer events (no data received).');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.log-container-config','','Whether to log the container configuration during initialization (INFO level).');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.missing-topics-fatal','false','Whether the container should fail to start if at least one of the configured topics are not present on the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.monitor-interval','','Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.no-poll-threshold','','Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.poll-timeout','','Timeout to use when polling the consumer.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.listener.type','single','Listener type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.acks','','Number of acknowledgments the producer requires the leader to have received before considering a request complete.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.batch-size','','Default batch size. A small batch size will make batching less common and may reduce throughput (a batch size of zero disables batching entirely).');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.bootstrap-servers','','Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.buffer-memory','','Total memory size the producer can use to buffer records waiting to be sent to the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.client-id','','ID to pass to the server when making requests. Used for server-side logging.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.compression-type','','Compression type for all data generated by the producer.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.key-serializer','','Serializer class for keys.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.properties.*','','Additional producer-specific properties used to configure the client.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.retries','','When greater than zero, enables retrying of failed sends.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.security.protocol','','Security protocol used to communicate with brokers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.key-password','','Password of the private key in the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.key-store-location','','Location of the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.key-store-password','','Store password for the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.protocol','','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.trust-store-location','','Location of the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.trust-store-password','','Store password for the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.transaction-id-prefix','','When non empty, enables transaction support for producer.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.producer.value-serializer','','Serializer class for values.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.properties.*','','Additional properties, common to producers and consumers, used to configure the client.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.security.protocol','','Security protocol used to communicate with brokers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.key-password','','Password of the private key in the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.key-store-location','','Location of the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.key-store-password','','Store password for the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.protocol','','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.trust-store-location','','Location of the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.trust-store-password','','Store password for the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.application-id','','Kafka streams application.id property; default spring.application.name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.auto-startup','true','Whether or not to auto-start the streams factory bean.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.bootstrap-servers','','Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for streams.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.cache-max-size-buffering','','Maximum memory size to be used for buffering across all threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.client-id','','ID to pass to the server when making requests. Used for server-side logging.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.properties.*','','Additional Kafka properties used to configure the streams.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.replication-factor','','The replication factor for change log topics and repartition topics created by the stream processing application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.security.protocol','','Security protocol used to communicate with brokers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.key-password','','Password of the private key in the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.key-store-location','','Location of the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.key-store-password','','Store password for the key store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.protocol','','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.trust-store-location','','Location of the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.trust-store-password','','Store password for the trust store file.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.streams.state-dir','','Directory location for the state store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.kafka.template.default-topic','','Default topic to which messages are sent.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.addresses','','Comma-separated list of addresses to which the client should connect. When set, the host and port are ignored.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.cache.channel.checkout-timeout','','Duration to wait to obtain a channel if the cache size has been reached. If 0, always create a new channel.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.cache.channel.size','','Number of channels to retain in the cache. When "check-timeout">0, max channels per connection.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.cache.connection.mode','channel','Connection factory cache mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.cache.connection.size','','Number of connections to cache. Only applies when mode is CONNECTION.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.connection-timeout','','Connection timeout. Set it to zero to wait forever.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.dynamic','true','Whether to create an AmqpAdmin bean.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.host','localhost','RabbitMQ host. Ignored if an address is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.acknowledge-mode','','Acknowledge mode of container.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.auto-startup','true','Whether to start the container automatically on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.consumers-per-queue','','Number of consumers per queue.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.default-requeue-rejected','','Whether rejected deliveries are re-queued by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.idle-event-interval','','How often idle container events should be published.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.missing-queues-fatal','false','Whether to fail if the queues declared by the container are not available on the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.prefetch','','Maximum number of unacknowledged messages that can be outstanding at each consumer.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.retry.enabled','false','Whether publishing retries are enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.retry.initial-interval','1000ms','Duration between the first and second attempt to deliver a message.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.retry.max-attempts','3.0','Maximum number of attempts to deliver a message.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.retry.max-interval','10000ms','Maximum duration between attempts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.retry.multiplier','1.0','Multiplier to apply to the previous retry interval.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.direct.retry.stateless','true','Whether retries are stateless or stateful.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.acknowledge-mode','','Acknowledge mode of container.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.auto-startup','true','Whether to start the container automatically on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.batch-size','','Batch size, expressed as the number of physical messages, to be used by the container.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.concurrency','','Minimum number of listener invoker threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.default-requeue-rejected','','Whether rejected deliveries are re-queued by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.idle-event-interval','','How often idle container events should be published.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.max-concurrency','','Maximum number of listener invoker threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.missing-queues-fatal','true','Whether to fail if the queues declared by the container are not available on the broker and/or whether to stop the container if one or more queues are deleted at runtime.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.prefetch','','Maximum number of unacknowledged messages that can be outstanding at each consumer.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.retry.enabled','false','Whether publishing retries are enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.retry.initial-interval','1000ms','Duration between the first and second attempt to deliver a message.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.retry.max-attempts','3.0','Maximum number of attempts to deliver a message.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.retry.max-interval','10000ms','Maximum duration between attempts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.retry.multiplier','1.0','Multiplier to apply to the previous retry interval.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.simple.retry.stateless','true','Whether retries are stateless or stateful.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.listener.type','simple','Listener container type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.password','guest','Login to authenticate against the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.port','','RabbitMQ port. Ignored if an address is set. Default to 5672, or 5671 if SSL is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.publisher-confirm-type','','Type of publisher confirms to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.publisher-returns','false','Whether to enable publisher returns.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.requested-channel-max','2047.0','Number of channels per connection requested by the client. Use 0 for unlimited.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.requested-heartbeat','','Requested heartbeat timeout; zero for none. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.algorithm','','SSL algorithm to use. By default, configured by the Rabbit client library.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.enabled','','Whether to enable SSL support. Determined automatically if an address is provided with the protocol (amqp:// vs. amqps://).');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.key-store','','Path to the key store that holds the SSL certificate.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.key-store-password','','Password used to access the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.key-store-type','PKCS12','Key store type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.trust-store','','Trust store that holds SSL certificates.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.trust-store-password','','Password used to access the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.trust-store-type','JKS','Trust store type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.validate-server-certificate','true','Whether to enable server side certificate validation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.ssl.verify-hostname','true','Whether to enable hostname verification.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.default-receive-queue','','Name of the default queue to receive messages from when none is specified explicitly.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.exchange','','Name of the default exchange to use for send operations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.mandatory','','Whether to enable mandatory messages.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.receive-timeout','','Timeout for `receive()` operations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.reply-timeout','','Timeout for `sendAndReceive()` operations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.retry.enabled','false','Whether publishing retries are enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.retry.initial-interval','1000ms','Duration between the first and second attempt to deliver a message.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.retry.max-attempts','3.0','Maximum number of attempts to deliver a message.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.retry.max-interval','10000ms','Maximum duration between attempts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.retry.multiplier','1.0','Multiplier to apply to the previous retry interval.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.template.routing-key','','Value of a default routing key to use for send operations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.username','guest','Login user to authenticate to the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.rabbitmq.virtual-host','','Virtual host to use when connecting to the broker.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.webservices.path','/services','Path that serves as the base URI for the services.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.webservices.servlet.init.*','','Servlet init parameters to pass to Spring Web Services.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.webservices.servlet.load-on-startup','-1.0','Load on startup priority of the Spring Web Services servlet.');
insert into propriedade(categoria,nome,valor,descricao) values ('Integration properties','spring.webservices.wsdl-locations','','Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.');
----------------------------------------
-- WEB PROPERTIES
----------------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.hateoas.use-hal-as-default-json-media-type','true','Whether application/hal+json responses should be sent to requests that accept application/json.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.jersey.application-path','','Path that serves as the base URI for the application. If specified, overrides the value of "@ApplicationPath".');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.jersey.filter.order','0.0','Jersey filter chain order.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.jersey.init.*','','Init parameters to pass to Jersey through the servlet or filter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.jersey.servlet.load-on-startup','-1.0','Load on startup priority of the Jersey servlet.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.jersey.type','servlet','Jersey integration type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.async.request-timeout','','Amount of time before asynchronous request handling times out. If this value is not set, the default timeout of the underlying implementation is used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.contentnegotiation.favor-parameter','false','Whether a request parameter ("format" by default) should be used to determine the requested media type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.contentnegotiation.media-types.*','','Map file extensions to media types for content negotiation. For instance, yml to text/yaml.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.contentnegotiation.parameter-name','','Query parameter name to use when "favor-parameter" is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.converters.preferred-json-mapper','','Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.dispatch-options-request','true','Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.dispatch-trace-request','false','Whether to dispatch TRACE requests to the FrameworkServlet doService method.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.format.date','','Date format to use, for example `dd/MM/yyyy`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.format.date-time','','Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.format.time','','Time format to use, for example `HH:mm:ss`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.formcontent.filter.enabled','true','Whether to enable Spring''s FormContentFilter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.hiddenmethod.filter.enabled','false','Whether to enable Spring''s HiddenHttpMethodFilter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.ignore-default-model-on-redirect','true','Whether the content of the "default" model should be ignored during redirect scenarios.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.locale','','Locale to use. By default, this locale is overridden by the "Accept-Language" header.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.locale-resolver','accept-header','Define how the locale should be resolved.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.log-request-details','false','Whether logging of (potentially sensitive) request details at DEBUG and TRACE level is allowed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.log-resolved-exception','false','Whether to enable warn logging of exceptions resolved by a "HandlerExceptionResolver", except for "DefaultHandlerExceptionResolver".');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.message-codes-resolver-format','','Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.publish-request-handled-events','true','Whether to publish a ServletRequestHandledEvent at the end of each request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.servlet.load-on-startup','-1.0','Load on startup priority of the dispatcher servlet.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.servlet.path','/','Path of the dispatcher servlet.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.static-path-pattern','/**','Path pattern used for static resources.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.throw-exception-if-no-handler-found','false','Whether a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.view.prefix','','Spring MVC view prefix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.mvc.view.suffix','','Spring MVC view suffix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.add-mappings','true','Whether to enable default resource handling.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.cache-private','','Indicate that the response message is intended for a single user and must not be stored by a shared cache.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.cache-public','','Indicate that any cache may store the response.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.max-age','','Maximum time the response should be cached, in seconds if no duration suffix is not specified.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.must-revalidate','','Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.no-cache','','Indicate that the cached response can be reused only if re-validated with the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.no-store','','Indicate to not cache the response in any case.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.no-transform','','Indicate intermediaries (caches and others) that they should not transform the response content.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.proxy-revalidate','','Same meaning as the "must-revalidate" directive, except that it does not apply to private caches.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.s-max-age','','Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.stale-if-error','','Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.cachecontrol.stale-while-revalidate','','Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.cache.period','','Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used. Can be overridden by the ''spring.resources.cache.cachecontrol'' properties.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.cache','true','Whether to enable caching in the Resource chain.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.compressed','false','Whether to enable resolution of already compressed resources (gzip, brotli). Checks for a resource name with the ''.gz'' or ''.br'' file extensions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.enabled','','Whether to enable the Spring Resource Handling chain. By default, disabled unless at least one strategy has been enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.html-application-cache','false','Whether to enable HTML5 application cache manifest rewriting.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.strategy.content.enabled','false','Whether to enable the content Version Strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.strategy.content.paths','[/**]','Comma-separated list of patterns to apply to the content Version Strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.strategy.fixed.enabled','false','Whether to enable the fixed Version Strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.strategy.fixed.paths','[/**]','Comma-separated list of patterns to apply to the fixed Version Strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.chain.strategy.fixed.version','','Version string to use for the fixed Version Strategy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.resources.static-locations','[classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/]','Locations of static resources. Defaults to classpath:[/META-INF/resources/, /resources/, /static/, /public/].');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.servlet.multipart.enabled','true','Whether to enable support of multipart uploads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.servlet.multipart.file-size-threshold','0B','Threshold after which files are written to disk.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.servlet.multipart.location','','Intermediate location of uploaded files.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.servlet.multipart.max-file-size','1MB','Max file size.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.servlet.multipart.max-request-size','10MB','Max request size.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.servlet.multipart.resolve-lazily','false','Whether to resolve the multipart request lazily at the time of file or parameter access.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.webflux.base-path','','Base path for all web handlers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.webflux.format.date','','Date format to use, for example `dd/MM/yyyy`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.webflux.format.date-time','','Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.webflux.format.time','','Time format to use, for example `HH:mm:ss`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.webflux.hiddenmethod.filter.enabled','false','Whether to enable Spring''s HiddenHttpMethodFilter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Web properties','spring.webflux.static-path-pattern','/**','Path pattern used for static resources.');
-------------------------------
-- TEMPLATING PROPERTIES
-------------------------------
 
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.allow-request-override','false','Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.allow-session-override','false','Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.cache','false','Whether to enable template caching.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.charset','UTF-8','Template encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.check-template-location','true','Whether to check that the templates location exists.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.content-type','text/html','Content-Type value.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.enabled','true','Whether to enable MVC view resolution for this technology.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.expose-request-attributes','false','Whether all request attributes should be added to the model prior to merging with the template.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.expose-session-attributes','false','Whether all HttpSession attributes should be added to the model prior to merging with the template.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.expose-spring-macro-helpers','true','Whether to expose a RequestContext for use by Spring''s macro library, under the name "springMacroRequestContext".');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.prefer-file-system-access','true','Whether to prefer file system access for template loading. File system access enables hot detection of template changes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.prefix','','Prefix that gets prepended to view names when building a URL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.request-context-attribute','','Name of the RequestContext attribute for all views.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.settings.*','','Well-known FreeMarker keys which are passed to FreeMarker''s Configuration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.suffix','.ftlh','Suffix that gets appended to view names when building a URL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.template-loader-path','[classpath:/templates/]','Comma-separated list of template paths.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.freemarker.view-names','','View names that can be resolved.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.allow-request-override','false','Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.allow-session-override','false','Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.cache','false','Whether to enable template caching.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.charset','UTF-8','Template encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.check-template-location','true','Whether to check that the templates location exists.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.auto-escape','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.auto-indent','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.auto-indent-string','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.auto-new-line','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.base-template-class','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.cache-templates','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.declaration-encoding','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.expand-empty-elements','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.locale','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.new-line-string','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.resource-loader-path','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.configuration.use-double-quotes','','See GroovyMarkupConfigurer');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.content-type','text/html','Content-Type value.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.enabledtrue','','Whether to enable MVC view resolution for this technology.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.expose-request-attributes','false','Whether all request attributes should be added to the model prior to merging with the template.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.expose-session-attributes','false','Whether all HttpSession attributes should be added to the model prior to merging with the template.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.expose-spring-macro-helpers','true','Whether to expose a RequestContext for use by Spring''s macro library, under the name "springMacroRequestContext".');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.prefix','','Prefix that gets prepended to view names when building a URL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.request-context-attribute','','Name of the RequestContext attribute for all views.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.resource-loader-path','classpath:/templates/','Template path.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.suffix','.tpl','Suffix that gets appended to view names when building a URL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.groovy.template.view-names','','View names that can be resolved.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.allow-request-override','false','Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.allow-session-override','false','Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.cache','false','Whether to enable template caching.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.charset','UTF-8','Template encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.check-template-location','true','Whether to check that the templates location exists.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.content-type','text/html','Content-Type value.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.enabled','true','Whether to enable MVC view resolution for this technology.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.expose-request-attributes','false','Whether all request attributes should be added to the model prior to merging with the template.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.expose-session-attributes','false','Whether all HttpSession attributes should be added to the model prior to merging with the template.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.expose-spring-macro-helpers','true','Whether to expose a RequestContext for use by Spring''s macro library, under the name "springMacroRequestContext".');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.prefix','classpath:/templates/','Prefix to apply to template names.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.request-context-attribute','','Name of the RequestContext attribute for all views.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.suffix','.mustache','Suffix to apply to template names.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.mustache.view-names','','View names that can be resolved.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.cache','true','Whether to enable template caching.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.check-template','true','Whether to check that the template exists before rendering it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.check-template-location','true','Whether to check that the templates location exists.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.enable-spring-el-compiler','false','Enable the SpringEL compiler in SpringEL expressions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.enabled','true','Whether to enable Thymeleaf view resolution for Web frameworks.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.encoding','UTF-8','Template files encoding.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.excluded-view-names','','Comma-separated list of view names (patterns allowed) that should be excluded from resolution.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.mode','HTML','Template mode to be applied to templates. See also Thymeleaf''s TemplateMode enum.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.prefix','classpath:/templates/','Prefix that gets prepended to view names when building a URL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.reactive.chunked-mode-view-names','','Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.reactive.full-mode-view-names','','Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.reactive.max-chunk-size','0B','Maximum size of data buffers used for writing to the response. Templates will execute in CHUNKED mode by default if this is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.reactive.media-types','','Media types supported by the view technology.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.render-hidden-markers-before-checkboxes','false','Whether hidden form inputs acting as markers for checkboxes should be rendered before the checkbox element itself.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.servlet.content-type','text/html','Content-Type value written to HTTP responses.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.servlet.produce-partial-output-while-processing','true','Whether Thymeleaf should start writing partial output as soon as possible or buffer until template processing is finished.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.suffix','.html','Suffix that gets appended to view names when building a URL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.template-resolver-order','','Order of the template resolver in the chain. By default, the template resolver is first in the chain. Order start at 1 and should only be set if you have defined additional "TemplateResolver" beans.');
insert into propriedade(categoria,nome,valor,descricao) values ('Templating properties','spring.thymeleaf.view-names','','Comma-separated list of view names (patterns allowed) that can be resolved.');
-------------------------------
-- SERVER PROPERTIES
-------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.address','','Network address to which the server should bind.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.compression.enabled','false','Whether response compression is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.compression.excluded-user-agents','','Comma-separated list of user agents for which responses should not be compressed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.compression.mime-types','[text/html, text/xml, text/plain, text/css, text/javascript, application/javascript, application/json, application/xml]','Comma-separated list of MIME types that should be compressed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.compression.min-response-size','2KB','Minimum "Content-Length" value that is required for compression to be performed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.error.include-binding-errors','never','When to include "errors" attribute.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.error.include-exception','false','Include the "exception" attribute.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.error.include-message','never','When to include "message" attribute.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.error.include-stacktrace','never','When to include the "trace" attribute.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.error.path','/error','Path of the error controller.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.error.whitelabel.enabled','true','Whether to enable the default error page displayed in browsers in case of a server error.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.forward-headers-strategy','','Strategy for handling X-Forwarded-* headers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.http2.enabled','false','Whether to enable HTTP/2 support, if the current environment supports it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.append','false','Append to log.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.custom-format','','Custom log format, see org.eclipse.jetty.server.CustomRequestLog. If defined, overrides the "format" configuration key.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.enabled','false','Enable access log.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.file-date-format','','Date format to place in log file name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.filename','','Log filename. If not specified, logs redirect to "System.err".');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.format','ncsa','Log format.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.ignore-paths','','Request paths that should not be logged.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.accesslog.retention-period','31.0','Number of days before rotated log files are deleted.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.connection-idle-timeout','','Time that the connection can be idle before it is closed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.max-http-form-post-size','200000B','Maximum size of the form content in any HTTP post request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.threads.acceptors','-1.0','Number of acceptor threads to use. When the value is -1, the default, the number of acceptors is derived from the operating environment.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.threads.idle-timeout','60000ms','Maximum thread idle time.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.threads.max','200.0','Maximum number of threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.threads.max-queue-capacity','','Maximum capacity of the thread pool''s backing queue. A default is computed based on the threading configuration.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.threads.min','8.0','Minimum number of threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.jetty.threads.selectors','-1.0','Number of selector threads to use. When the value is -1, the default, the number of selectors is derived from the operating environment.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.max-http-header-size','8KB','Maximum size of the HTTP message header.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.netty.connection-timeout','','Connection timeout of the Netty channel.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.port','8080.0','Server HTTP port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.server-header','','Value to use for the Server response header (if empty, no header is sent).');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.application-display-name','application','Display name of the application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.context-parameters.*','','Servlet context init parameters.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.context-path','','Context path of the application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.encoding.enabled','true','Whether to enable http encoding support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.encoding.force','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.encoding.force-request','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.encoding.force-response','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.encoding.mapping.*','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.jsp.class-name','org.apache.jasper.servlet.JspServlet','Class name of the servlet to use for JSPs. If registered is true and this class * is on the classpath then it will be registered.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.jsp.init-parameters.*','','Init parameters used to configure the JSP servlet.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.jsp.registered','true','Whether the JSP servlet is registered.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.register-default-servlet','true','Whether to register the default Servlet with the container.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.comment','','Comment for the session cookie.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.domain','','Domain for the session cookie.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.http-only','','Whether to use "HttpOnly" cookies for session cookies.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.max-age','','Maximum age of the session cookie. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.name','','Session cookie name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.path','','Path of the session cookie.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.cookie.secure','','Whether to always mark the session cookie as secure.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.persistent','false','Whether to persist session data between restarts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.store-dir','','Directory used to store session data.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.timeout','30m','Session timeout. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.servlet.session.tracking-modes','','Session tracking modes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.shutdown','','Type of shutdown that the server will support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.ciphers','','Supported SSL ciphers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.client-auth','','Client authentication mode. Requires a trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.enabled','true','Whether to enable SSL support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.enabled-protocols','','Enabled SSL protocols.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.key-alias','','Alias that identifies the key in the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.key-password','','Password used to access the key in the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.key-store','','Path to the key store that holds the SSL certificate (typically a jks file).');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.key-store-password','','Password used to access the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.key-store-provider','','Provider for the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.protocol','TLS','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.trust-store','','Trust store that holds SSL certificates.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.trust-store-password','','Password used to access the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.trust-store-provider','','Provider for the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accept-count','100.0','Maximum queue length for incoming connection requests when all possible request processing threads are in use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.buffered','true','Whether to buffer output such that it is flushed only periodically.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.check-exists','false','Whether to check for log file existence so it can be recreated it if an external process has renamed it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.condition-if','','Whether logging of the request will only be enabled if "ServletRequest.getAttribute(conditionIf)" does not yield null.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.condition-unless','','Whether logging of the request will only be enabled if "ServletRequest.getAttribute(conditionUnless)" yield null.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.directory','logs','Directory in which log files are created. Can be absolute or relative to the Tomcat base dir.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.enabled','false','Enable access log.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.encoding','','Character set used by the log file. Default to the system default character set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.file-date-format','.yyyy-MM-dd','Date format to place in the log file name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.ipv6-canonical','false','Whether to use IPv6 canonical representation format as defined by RFC 5952.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.locale','','Locale used to format timestamps in log entries and in log file name suffix. Default to the default locale of the Java process.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.max-days','-1.0','Number of days to retain the access log files before they are removed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.pattern','common','Format pattern for access logs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.prefix','access_log','Log file name prefix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.rename-on-rotate','false','Whether to defer inclusion of the date stamp in the file name until rotate time.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.request-attributes-enabled','false','Set request attributes for the IP address, Hostname, protocol, and port used for the request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.rotate','true','Whether to enable access log rotation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.accesslog.suffix','.log','Log file name suffix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.additional-tld-skip-patterns','','Comma-separated list of additional patterns that match jars to ignore for TLD scanning. The special ''?'' and ''*'' characters can be used in the pattern to match one and only one character and zero or more characters respectively.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.background-processor-delay','10s','Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.basedir','','Tomcat base directory. If not specified, a temporary directory is used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.connection-timeout','','Amount of time the connector will wait, after accepting a connection, for the request URI line to be presented.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.max-connections','8192.0','Maximum number of connections that the server accepts and processes at any given time. Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.max-http-form-post-size','2MB','Maximum size of the form content in any HTTP post request.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.max-swallow-size','2MB','Maximum amount of request body to swallow.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.mbeanregistry.enabled','false','Whether Tomcat''s MBean Registry should be enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.processor-cache','200.0','Maximum number of idle processors that will be retained in the cache and reused with a subsequent request. When set to -1 the cache will be unlimited with a theoretical maximum size equal to the maximum number of connections.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.redirect-context-root','true','Whether requests to the context root should be redirected by appending a / to the path.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.relaxed-path-chars','','Comma-separated list of additional unencoded characters that should be allowed in URI paths. Only "> > [ \ ] ^ ` { | }" are allowed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.relaxed-query-chars','','Comma-separated list of additional unencoded characters that should be allowed in URI query strings. Only "> > [ \ ] ^ ` { | }" are allowed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.remoteip.host-header','X-Forwarded-Host','Name of the HTTP header from which the remote host is extracted.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.remoteip.internal-proxies','10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}|0:0:0:0:0:0:0:1|::1','Regular expression that matches proxies that are to be trusted.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.remoteip.port-header','X-Forwarded-Port','Name of the HTTP header used to override the original port value.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.remoteip.protocol-header','','Header that holds the incoming protocol, usually named "X-Forwarded-Proto".');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.remoteip.protocol-header-https-value','https','Value of the protocol header indicating whether the incoming request uses SSL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.remoteip.remote-ip-header','','Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.resource.allow-caching','true','Whether static resource caching is permitted for this web application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.resource.cache-ttl','','Time-to-live of the static resource cache.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.threads.max','200.0','Maximum amount of worker threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.threads.min-spare','10.0','Minimum amount of worker threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.uri-encoding','UTF-8','Character encoding to use to decode the URI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.tomcat.use-relative-redirects','false','Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.accesslog.dir','','Undertow access log directory.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.accesslog.enabled','false','Whether to enable the access log.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.accesslog.pattern','common','Format pattern for access logs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.accesslog.prefix','access_log.','Log file name prefix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.accesslog.rotate','true','Whether to enable access log rotation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.accesslog.suffix','log','Log file name suffix.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.allow-encoded-slash','false','Whether the server should decode percent encoded slash characters. Enabling encoded slashes can have security implications due to different servers interpreting the slash differently. Only enable this if you have a legacy application that requires it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.always-set-keep-alive','true','Whether the ''Connection: keep-alive'' header should be added to all responses, even if not required by the HTTP specification.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.buffer-size','','Size of each buffer. The default is derived from the maximum amount of memory that is available to the JVM.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.decode-url','true','Whether the URL should be decoded. When disabled, percent-encoded characters in the URL will be left as-is.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.direct-buffers','','Whether to allocate buffers outside the Java heap. The default is derived from the maximum amount of memory that is available to the JVM.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.eager-filter-init','true','Whether servlet filters should be initialized on startup.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.max-cookies','200.0','Maximum number of cookies that are allowed. This limit exists to prevent hash collision based DOS attacks.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.max-headers','','Maximum number of headers that are allowed. This limit exists to prevent hash collision based DOS attacks.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.max-http-post-size','-1B','Maximum size of the HTTP post content. When the value is -1, the default, the size is unlimited.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.max-parameters','','Maximum number of query or path parameters that are allowed. This limit exists to prevent hash collision based DOS attacks.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.no-request-timeout','','Amount of time a connection can sit idle without processing a request, before it is closed by the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.options.server.*','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.options.socket.*','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.threads.io','','Number of I/O threads to create for the worker. The default is derived from the number of available processors.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.threads.worker','','Number of worker threads. The default is 8 times the number of I/O threads.');
insert into propriedade(categoria,nome,valor,descricao) values ('Server properties','server.undertow.url-charset','UTF-8','Charset used to decode URLs.');
-------------------------------
-- SECURITY PROPERTIES
-------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.anonymous-read-only','','Whether read-only operations should use an anonymous environment. Disabled by default unless a username is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.base','','Base suffix from which all operations should originate.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.base-environment.*','','LDAP specification settings.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.base-dn','','List of base DNs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.credential.password','','Embedded LDAP password.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.credential.username','','Embedded LDAP username.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.ldif','classpath:schema.ldif','Schema (LDIF) script resource reference.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.port','0.0','Embedded LDAP port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.validation.enabled','true','Whether to enable LDAP schema validation.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.embedded.validation.schema','','Path to the custom schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.password','','Login password of the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.urls','','LDAP URLs of the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.ldap.username','','Login username of the server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.filter.dispatcher-types','[async, error, request]','Security filter chain dispatcher types.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.filter.order','-100.0','Security filter chain order.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.client.provider.*','','OAuth provider details.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.client.registration.*','','OAuth client registrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.jwt.issuer-uri','','URI that can either be an OpenID Connect discovery endpoint or an OAuth 2.0 Authorization Server Metadata endpoint defined by RFC 8414.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.jwt.jwk-set-uri','','JSON Web Key URI to use to verify the JWT token.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.jwt.jws-algorithm','RS256','JSON Web Algorithm used for verifying the digital signatures.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.jwt.public-key-location','','Location of the file containing the public key used to verify a JWT.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.opaquetoken.client-id','','Client id used to authenticate with the token introspection endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.opaquetoken.client-secret','','Client secret used to authenticate with the token introspection endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.oauth2.resourceserver.opaquetoken.introspection-uri','','OAuth 2.0 endpoint through which token introspection is accomplished.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.saml2.relyingparty.registration.*','','SAML2 relying party registrations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.user.name','user','Default user name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.user.password','','Password for the default user name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.security.user.roles','','Granted roles for the default user name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.hazelcast.flush-mode','on-save','Sessions flush mode. Determines when session changes are written to the session store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.hazelcast.map-name','spring:session:sessions','Name of the map used to store sessions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.hazelcast.save-mode','on-set-attribute','Sessions save mode. Determines how session changes are tracked and saved to the session store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.jdbc.cleanup-cron','0 * * * * *','Cron expression for expired session cleanup job.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.jdbc.flush-mode','on-save','Sessions flush mode. Determines when session changes are written to the session store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.jdbc.initialize-schema','embedded','Database schema initialization mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.jdbc.save-mode','on-set-attribute','Sessions save mode. Determines how session changes are tracked and saved to the session store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.jdbc.schema','classpath:org/springframework/session/jdbc/schema-@@platform@@.sql','Path to the SQL file to use to initialize the database schema.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.jdbc.table-name','SPRING_SESSION','Name of the database table used to store sessions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.mongodb.collection-name','sessions','Collection name used to store sessions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.redis.cleanup-cron','0 * * * * *','Cron expression for expired session cleanup job.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.redis.configure-action','notify-keyspace-events','The configure action to apply when no user defined ConfigureRedisAction bean is present.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.redis.flush-mode','on-save','Sessions flush mode. Determines when session changes are written to the session store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.redis.namespace','spring:session','Namespace for keys used to store sessions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.redis.save-mode','on-set-attribute','Sessions save mode. Determines how session changes are tracked and saved to the session store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.servlet.filter-dispatcher-types','[async, error, request]','Session repository filter dispatcher types.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.servlet.filter-order','','Session repository filter order.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.store-type','','Session store type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Security properties','spring.session.timeout','','Session timeout. If a duration suffix is not specified, seconds will be used.');
 
-------------------------------
-- ACTUATOR PROPERTIES
-------------------------------
 
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.auditevents.enabled','true','Whether to enable storage of audit events.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.cloudfoundry.enabled','true','Whether to enable extended Cloud Foundry actuator endpoints.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.cloudfoundry.skip-ssl-validation','false','Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.auditevents.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.auditevents.enabled','true','Whether to enable the auditevents endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.beans.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.beans.enabled','true','Whether to enable the beans endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.caches.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.caches.enabled','true','Whether to enable the caches endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.conditions.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.conditions.enabled','true','Whether to enable the conditions endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.configprops.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.configprops.enabled','true','Whether to enable the configprops endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.configprops.keys-to-sanitize','[password, secret, key, token, .*credentials.*, vcap_services, sun.java.command]','Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.env.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.env.enabled','true','Whether to enable the env endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.env.keys-to-sanitize','[password, secret, key, token, .*credentials.*, vcap_services, sun.java.command]','Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.flyway.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.flyway.enabled','true','Whether to enable the flyway endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.enabled','true','Whether to enable the health endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.group.*','','Health endpoint groups.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.probes.enabled','false','Whether to enable liveness and readiness probes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.roles','','Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.show-components','','When to show components. If not specified the ''show-details'' setting will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.show-details','never','When to show full health details.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.status.http-mapping.*','','Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200).');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.health.status.order','[DOWN, OUT_OF_SERVICE, UP, UNKNOWN]','Comma-separated list of health statuses in order of severity.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.heapdump.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.heapdump.enabled','true','Whether to enable the heapdump endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.httptrace.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.httptrace.enabled','true','Whether to enable the httptrace endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.info.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.info.enabled','true','Whether to enable the info endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.integrationgraph.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.integrationgraph.enabled','true','Whether to enable the integrationgraph endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.jolokia.config.*','','Jolokia settings. Refer to the documentation of Jolokia for more details.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.jolokia.enabled','true','Whether to enable the jolokia endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.liquibase.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.liquibase.enabled','true','Whether to enable the liquibase endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.logfile.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.logfile.enabled','true','Whether to enable the logfile endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.logfile.external-file','','External Logfile to be accessed. Can be used if the logfile is written by output redirect and not by the logging system itself.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.loggers.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.loggers.enabled','true','Whether to enable the loggers endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.mappings.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.mappings.enabled','true','Whether to enable the mappings endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.metrics.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.metrics.enabled','true','Whether to enable the metrics endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.prometheus.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.prometheus.enabled','true','Whether to enable the prometheus endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.scheduledtasks.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.scheduledtasks.enabled','true','Whether to enable the scheduledtasks endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.sessions.enabled','true','Whether to enable the sessions endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.shutdown.enabled','false','Whether to enable the shutdown endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.threaddump.cache.time-to-live','0ms','Maximum time that a response can be cached.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoint.threaddump.enabled','true','Whether to enable the threaddump endpoint.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.enabled-by-default','','Whether to enable or disable all endpoints by default.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.jmx.domain','org.springframework.boot','Endpoints JMX domain name. Fallback to ''spring.jmx.default-domain'' if set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.jmx.exposure.exclude','','Endpoint IDs that should be excluded or ''*'' for all.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.jmx.exposure.include','*','Endpoint IDs that should be included or ''*'' for all.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.jmx.static-names','','Additional static properties to append to all ObjectNames of MBeans representing Endpoints.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.migrate-legacy-ids','false','Whether to transparently migrate legacy endpoint IDs.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.base-path','/actuator','Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.cors.allow-credentials','','Whether credentials are supported. When not set, credentials are not supported.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.cors.allowed-headers','','Comma-separated list of headers to allow in a request. ''*'' allows all headers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.cors.allowed-methods','','Comma-separated list of methods to allow. ''*'' allows all methods. When not set, defaults to GET.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.cors.allowed-origins','','Comma-separated list of origins to allow. ''*'' allows all origins. When not set, CORS support is disabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.cors.exposed-headers','','Comma-separated list of headers to include in a response.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.cors.max-age','1800s','How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.exposure.exclude','','Endpoint IDs that should be excluded or ''*'' for all.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.exposure.include','[health, info]','Endpoint IDs that should be included or ''*'' for all.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.endpoints.web.path-mapping.*','','Mapping between endpoint IDs and the path that should expose them.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.cassandra.enabled','true','Whether to enable Cassandra health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.couchbase.enabled','true','Whether to enable Couchbase health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.db.enabled','true','Whether to enable database health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.defaults.enabled','true','Whether to enable default health indicators.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.diskspace.enabled','true','Whether to enable disk space health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.diskspace.path','','Path used to compute the available disk space.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.diskspace.threshold','10MB','Minimum disk space that should be available.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.elasticsearch.enabled','true','Whether to enable Elasticsearch health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.influxdb.enabled','true','Whether to enable InfluxDB health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.jms.enabled','true','Whether to enable JMS health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.ldap.enabled','true','Whether to enable LDAP health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.livenessstate.enabled','false','Whether to enable liveness state health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.mail.enabled','true','Whether to enable Mail health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.mongo.enabled','true','Whether to enable MongoDB health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.neo4j.enabled','true','Whether to enable Neo4j health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.ping.enabled','true','Whether to enable ping health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.rabbit.enabled','true','Whether to enable RabbitMQ health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.readinessstate.enabled','false','Whether to enable readiness state health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.redis.enabled','true','Whether to enable Redis health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.health.solr.enabled','true','Whether to enable Solr health check.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.info.build.enabled','true','Whether to enable build info.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.info.defaults.enabled','true','Whether to enable default info contributors.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.info.env.enabled','true','Whether to enable environment info.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.info.git.enabled','true','Whether to enable git info.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.info.git.mode','simple','Mode to use to expose git information.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.distribution.maximum-expected-value.*','','Maximum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.distribution.minimum-expected-value.*','','Minimum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.distribution.percentiles-histogram.*','','Whether meter IDs starting with the specified name should publish percentile histograms. For monitoring systems that support aggregable percentile calculation based on a histogram, this can be set to true. For other systems, this has no effect. The longest match wins, the key `all` can also be used to configure all meters.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.distribution.percentiles.*','','Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name. The longest match wins, the key `all` can also be used to configure all meters.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.distribution.slo.*','','Specific service-level objective boundaries for meter IDs starting with the specified name. The longest match wins. Counters will be published for each specified boundary. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.enable.*','','Whether meter IDs starting with the specified name should be enabled. The longest match wins, the key `all` can also be used to configure all meters.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.api-token','','AppOptics API token.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.batch-size','500.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.connect-timeout','5s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.floor-times','false','Whether to ship a floored time, useful when sending measurements from multiple hosts to align them on a given time boundary.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.host-tag','instance','Tag that will be mapped to "@host" when shipping metrics to AppOptics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.appoptics.uri','https://api.appoptics.com/v1/measurements','URI to ship metrics to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.config-refresh-frequency','10s','Frequency for refreshing config settings from the LWC service.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.config-time-to-live','150s','Time to live for subscriptions from the LWC service.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.config-uri','http://localhost:7101/lwc/api/v1/expressions/local-dev','URI for the Atlas LWC endpoint to retrieve current subscriptions.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.eval-uri','http://localhost:7101/lwc/api/v1/evaluate','URI for the Atlas LWC endpoint to evaluate the data for a subscription.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.lwc-enabled','false','Whether to enable streaming to Atlas LWC.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.meter-time-to-live','15m','Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.num-threads','4.0','Number of threads to use with the metrics publishing scheduler.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.atlas.uri','http://localhost:7101/api/v1/publish','URI of the Atlas server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.api-key','','Datadog API key.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.application-key','','Datadog application key. Not strictly required, but improves the Datadog experience by sending meter descriptions, types, and base units to Datadog.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.descriptions','true','Whether to publish descriptions metadata to Datadog. Turn this off to minimize the amount of metadata sent.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.host-tag','instance','Tag that will be mapped to "host" when shipping metrics to Datadog.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.datadog.uri','https://api.datadoghq.com','URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Datadog, you can define the location of the proxy with this.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.api-token','','Dynatrace authentication token.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.device-id','','ID of the custom device that is exporting metrics to Dynatrace.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.group','','Group for exported metrics. Used to specify custom device group name in the Dynatrace UI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.technology-type','java','Technology type for exported metrics. Used to group metrics under a logical technology name in the Dynatrace UI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.dynatrace.uri','','URI to ship metrics to. Should be used for SaaS, self managed instances or to en-route through an internal proxy.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.auto-create-index','true','Whether to create the index automatically if it does not exist.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.host','http://localhost:9200','Host to export metrics to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.index','metrics','Index to export metrics to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.index-date-format','yyyy-MM','Index date format used for rolling indices. Appended to the index name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.index-date-separator','-','Prefix to separate the index name from the date format used for rolling indices.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.password','','Login password of the Elastic server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.pipeline','','Ingest pipeline name. By default, events are not pre-processed.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.timestamp-field-name','@timestamp','Name of the timestamp field.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.elastic.user-name','Login user of the Elastic server.','');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.addressing-mode','multicast','UDP addressing mode, either unicast or multicast.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.duration-units','milliseconds','Base time unit used to report durations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.enabled','true','Whether exporting of metrics to Ganglia is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.host','localhost','Host of the Ganglia server to receive exported metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.port','8649.0','Port of the Ganglia server to receive exported metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.ganglia.time-to-live','1.0','Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one greater than the number of hops (routers) between the hosts.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.duration-units','milliseconds','Base time unit used to report durations.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.enabled','true','Whether exporting of metrics to Graphite is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.graphite-tags-enabled','','Whether Graphite tags should be used, as opposed to a hierarchical naming convention. Enabled by default unless "tagsAsPrefix" is set.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.host','localhost','Host of the Graphite server to receive exported metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.port','2004.0','Port of the Graphite server to receive exported metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.protocol','pickled','Protocol to use while shipping data to Graphite.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.rate-units','seconds','Base time unit used to report rates.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.graphite.tags-as-prefix','[]','For the hierarchical naming convention, turn the specified tag keys into part of the metric prefix. Ignored if "graphiteTagsEnabled" is true.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.api-token','','Humio API token.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.connect-timeout','5s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.tags.*','','Humio tags describing the data source in which metrics will be stored. Humio tags are a distinct concept from Micrometer''s tags. Micrometer''s tags are used to divide metrics along dimensional boundaries.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.humio.uri','https://cloud.humio.com','URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Humio, you can define the location of the proxy with this.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.auto-create-db','true','Whether to create the Influx database if it does not exist before attempting to publish metrics to it.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.compressed','true','Whether to enable GZIP compression of metrics batches published to Influx.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.consistency','one','Write consistency for each point.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.db','mydb','Tag that will be mapped to "host" when shipping metrics to Influx.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.password','','Login password of the Influx server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.retention-duration','','Time period for which Influx should retain data in the current database. For instance 7d, check the influx documentation for more details on the duration format.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.retention-policy','','Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.retention-replication-factor','','How many copies of the data are stored in the cluster. Must be 1 for a single node instance.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.retention-shard-duration','','Time range covered by a shard group. For instance 2w, check the influx documentation for more details on the duration format.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.uri','http://localhost:8086','URI of the Influx server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.influx.user-name','','Login user of the Influx server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.jmx.domain','metrics','Metrics JMX domain name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.jmx.enabled','true','Whether exporting of metrics to JMX is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.jmx.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.password','','Login password of the KairosDB server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.uri','http://localhost:8080/api/v1/datapoints','URI of the KairosDB server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.kairos.user-name','','Login user of the KairosDB server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.account-id','','New Relic account ID.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.api-key','','New Relic API key.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.client-provider-type','','Client provider type to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.event-type','SpringBootSample','The event type that should be published. This property will be ignored if ''meter-name-event-type-enabled'' is set to ''true''.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.meter-name-event-type-enabled','false','Whether to send the meter name as the event type instead of using the ''event-type'' configuration property value. Can be set to ''true'' if New Relic guidelines are not being followed or event types consistent with previous Spring Boot releases are required.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.newrelic.uri','https://insights-collector.newrelic.com','URI to ship metrics to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.descriptions','true','Whether to enable publishing descriptions as part of the scrape payload to Prometheus. Turn this off to minimize the amount of data sent on each scrape.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.enabled','true','Whether exporting of metrics to Prometheus is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.histogram-flavor','prometheus','Histogram type for backing DistributionSummary and Timer.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.pushgateway.base-url','http://localhost:9091','Base URL for the Pushgateway.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.pushgateway.enabled','false','Enable publishing via a Prometheus Pushgateway.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.pushgateway.grouping-key.*','','Grouping key for the pushed metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.pushgateway.job','','Job identifier for this application instance.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.pushgateway.push-rate','1m','Frequency with which to push metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.pushgateway.shutdown-operation','none','Operation that should be performed on shutdown.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.prometheus.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.access-token','','SignalFX access token.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.source','','Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.step','10s','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.signalfx.uri','https://ingest.signalfx.com','URI to ship metrics to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.simple.enabled','true','Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.simple.mode','cumulative','Counting mode.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.simple.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.connect-timeout','1s','Connection timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.project-id','','Identifier of the Google Cloud project to monitor.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.read-timeout','10s','Read timeout for requests to this backend.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.resource-type','global','Monitored resource type.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.stackdriver.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.enabled','true','Whether exporting of metrics to StatsD is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.flavor','datadog','StatsD line protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.host','localhost','Host of the StatsD server to receive exported metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.max-packet-length','1400.0','Total length of a single payload should be kept within your network''s MTU.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.polling-frequency','10s','How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.port','8125.0','Port of the StatsD server to receive exported metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.statsd.publish-unchanged-meters','true','Whether to send unchanged meters to the StatsD server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.api-token','','API token used when publishing metrics directly to the Wavefront API host.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.batch-size','10000.0','Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.enabled','true','Whether exporting of metrics to this backend is enabled.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.global-prefix','','Global prefix to separate metrics originating from this app''s white box instrumentation from those originating from other Wavefront integrations when viewed in the Wavefront UI.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.sender.flush-interval','1s','');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.sender.max-queue-size','50000.0','');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.sender.message-size','','');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.source','','Unique identifier for the app instance that is the source of metrics being published to Wavefront. Defaults to the local host name.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.step','1m','Step size (i.e. reporting frequency) to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.export.wavefront.uri','https://longboard.wavefront.com','URI to ship metrics to.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.tags.*','','Common tags that are applied to every meter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.use-global-registry','true','Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics. For testing, set this to ''false'' to maximize test independence.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.client.max-uri-tags','100.0','Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.client.request.autotime.enabled','true','Whether to automatically time web client requests.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.client.request.autotime.percentiles','','Computed non-aggregable percentiles to publish.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.client.request.autotime.percentiles-histogram','false','Whether percentile histograms should be published.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.client.request.metric-name','http.client.requests','Name of the metric for sent requests.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.server.max-uri-tags','100.0','Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.server.request.autotime.enabled','true','Whether to automatically time web server requests.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.server.request.autotime.percentiles','','Computed non-aggregable percentiles to publish.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.server.request.autotime.percentiles-histogram','false','Whether percentile histograms should be published.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.server.request.ignore-trailing-slash','true','Whether the trailing slash should be ignored when recording metrics.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.metrics.web.server.request.metric-name','http.server.requests','Name of the metric for received requests.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.add-application-context-header','false','Add the "X-Application-Context" HTTP header in each response.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.address','','Network address to which the management endpoints should bind. Requires a custom management.server.port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.port','','Management endpoint HTTP port (uses the same port as the application by default). Configure a different port to use management-specific SSL.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.servlet.context-path','','Management endpoint context-path (for instance, `/management`). Requires a custom management.server.port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.ciphers','','Supported SSL ciphers.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.client-auth','','Client authentication mode. Requires a trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.enabled','true','Whether to enable SSL support.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.enabled-protocols','','Enabled SSL protocols.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.key-alias','','Alias that identifies the key in the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.key-password','','Password used to access the key in the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.key-store','','Path to the key store that holds the SSL certificate (typically a jks file).');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.key-store-password','','Password used to access the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.key-store-provider','','Provider for the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.key-store-type','','Type of the key store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.protocol','TLS','SSL protocol to use.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.trust-store','','Trust store that holds SSL certificates.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.trust-store-password','','Password used to access the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.trust-store-provider','','Provider for the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.server.ssl.trust-store-type','','Type of the trust store.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.trace.http.enabled','true','Whether to enable HTTP request-response tracing.');
insert into propriedade(categoria,nome,valor,descricao) values ('Actuator properties','management.trace.http.include','[request-headers, response-headers, cookies, errors]','Items to be included in the trace. Defaults to request headers (excluding Authorization but including Cookie), response headers (including Set-Cookie), and time taken.');
-------------------------------
-- RSOCKET PROPERTIES
-------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('RSocket properties','spring.rsocket.server.address','','Network address to which the server should bind.');
insert into propriedade(categoria,nome,valor,descricao) values ('RSocket properties','spring.rsocket.server.mapping-path','','Path under which RSocket handles requests (only works with websocket transport).');
insert into propriedade(categoria,nome,valor,descricao) values ('RSocket properties','spring.rsocket.server.port','','Server port.');
insert into propriedade(categoria,nome,valor,descricao) values ('RSocket properties','spring.rsocket.server.transport','tcp','RSocket transport protocol.');
-------------------------------
-- DEVTOOLS PROPERTIES
-------------------------------
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.add-properties','true','Whether to enable development property defaults.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.livereload.enabled','true','Whether to enable a livereload.com-compatible server.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.livereload.port','35729.0','Server port.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.remote.context-path','/.~~spring-boot!~','Context path used to handle the remote connection.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.remote.proxy.host','','The host of the proxy to use to connect to the remote application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.remote.proxy.port','','The port of the proxy to use to connect to the remote application.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.remote.restart.enabled','true','Whether to enable remote restart.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.remote.secret','','A shared secret required to establish a connection (required to enable remote support).');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.remote.secret-header-name','X-AUTH-TOKEN','HTTP header used to transfer the shared secret.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.additional-exclude','','Additional patterns that should be excluded from triggering a full restart.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.additional-paths','','Additional paths to watch for changes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.enabled','true','Whether to enable automatic restart.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.exclude','META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties','Patterns that should be excluded from triggering a full restart.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.log-condition-evaluation-delta','true','Whether to log the condition evaluation delta upon restart.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.poll-interval','1s','Amount of time to wait between polling for classpath changes.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.quiet-period','400ms','Amount of quiet time required without any classpath changes before a restart is triggered.');
insert into propriedade(categoria,nome,valor,descricao) values ('Devtools properties','spring.devtools.restart.trigger-file','','Name of a specific file that, when changed, triggers the restart check. Must be a simple name (without any path) of a file that appears on your classpath. If not specified, any classpath file change triggers the restart.');
